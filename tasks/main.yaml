# ------------------------------------------------------------------------------


- name: Install dependencies
  ansible.builtin.package:
    name:
      - python3-venv
    state: present
  become: true

- name: Fetch and run Poetry installer script
  shell: |
    if ! ~/.local/bin/poetry --version | grep -q '{{ poetry_version }}$'; then
      curl -sSL https://install.python-poetry.org | python - --version {{ poetry_version }}
      if ! ~/.local/bin/poetry --version | grep -q '{{ poetry_version }}$'; then
        exit 1
      else
        echo status=changed
      fi
    fi
  register: task
  changed_when: "'status=changed' in task.stdout"

- { name: "Debug", debug: { var: task.stdout_lines }, tags: [debug] }


# ------------------------------------------------------------------------------
# Zsh


- name: "zsh : Setup completion"
  ansible.builtin.shell: |
    sudo mkdir -p /usr/local/share/zsh/site-functions

    file=/usr/local/share/zsh/site-functions/_poetry

    sudo sh -c ">> $file"

    hash_before=$(cat $file | sha256sum)

    ~/.local/bin/poetry completions zsh | sudo tee $file > /dev/null

    hash_after=$(cat $file | sha256sum)

    if [ $hash_before != $hash_after ]; then
      echo status=changed

      if command -v zsh; then
        zcd=${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompdump

        rm -rf $zcd
        zsh -c "autoload -Uz compinit bashcompinit && compinit -d $zcd && bashcompinit"
        zsh -c "zcompile $zcd"
      fi
    fi
  args: { executable: /usr/bin/bash, warn: false }
  register: task
  changed_when: "'status=changed' in task.stdout"


# ------------------------------------------------------------------------------
# Bash


- name: "bash : Setup completion"
  ansible.builtin.shell: |
    sudo mkdir -p /etc/bash_completion.d

    file=/etc/bash_completion.d/poetry.bash-completion

    sudo sh -c ">> $file"

    hash_before=$(cat $file | sha256sum)

    ~/.local/bin/poetry completions bash | sudo tee $file > /dev/null

    hash_after=$(cat $file | sha256sum)

    if [ $hash_before != $hash_after ]; then
      echo status=changed
    fi
  args: { executable: /usr/bin/bash, warn: false }
  register: task
  changed_when: "'status=changed' in task.stdout"


# ------------------------------------------------------------------------------
